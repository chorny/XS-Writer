#!/usr/bin/perl -w

use Test::More 'no_plan';
use Test::Differences;

use File::Path;

use_ok 'XS::Writer';

my $writer = XS::Writer->new(
    package   => 'Some::Employee',
    include   => <<'END',
#include "ppport.h"
END

);
isa_ok $writer, 'XS::Writer';
is $writer->package,    "Some::Employee";
is $writer->xs_type,    "Some__Employee";
is $writer->xs_prefix,  "Some__Employee_";
is $writer->xs_file,    "lib/Some/Employee_struct.xs";

$writer->struct(<<'END');
    typedef struct employee {
        char *      name;
        double      salary;
        int         id;
    };
END

my $xs = <<"END";
/* Generated by XS::Writer $XS::Writer::VERSION */
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include "ppport.h"


typedef employee *     Some__Employee;

MODULE = Some::Employee  PACKAGE = Some::Employee  PREFIX = Some__Employee_

Some::Employee
Some__Employee_new(char* CLASS)
    CODE:
       RETVAL = ((malloc(sizeof(employee))));
        if( RETVAL == NULL ) {
           warn( "unable to create new Some::Employee" );
       }
    OUTPUT:
       RETVAL


int
Some__Employee_id( Some::Employee self, ... )
    CODE:
        if( items > 1 )
            self->id = SvIV(ST(1));
        RETVAL = self->id;
    OUTPUT:
        RETVAL


char *
Some__Employee_name( Some::Employee self, ... )
    CODE:
        if( items > 1 )
            self->name = SvPV_nolen(ST(1));
        RETVAL = self->name;
    OUTPUT:
        RETVAL


double
Some__Employee_salary( Some::Employee self, ... )
    CODE:
        if( items > 1 )
            self->salary = SvNV(ST(1));
        RETVAL = self->salary;
    OUTPUT:
        RETVAL


END

eq_or_diff $writer->make_xs, $xs;

$writer->xs_file( "t/test/". $writer->xs_file );
$writer->write_xs;
END { rmtree "t/test" }

ok open my $fh, $writer->xs_file
    or diag "Can't open @{[ $writer->xs_file ]}: $!";
eq_or_diff join("", <$fh>), $xs;
